CCS PCM C Compiler, Version 4.114, 93513558               18-Dic.-16 18:07

               Filename: C:\Users\COMPUTADORA\Desktop\Core_LaboTEC\12_Pwm\main.lst

               ROM used: 731 words (9%)
                         Largest free fragment is 2048
               RAM used: 8 (2%) at main() level
                         22 (6%) worst case
               Stack:    5 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   27C
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses   XT,NOLVP 
.................... #use     delay(CLOCK=4M)                                   
*
0031:  MOVLW  27
0032:  MOVWF  04
0033:  BCF    03.7
0034:  MOVF   00,W
0035:  BTFSC  03.2
0036:  GOTO   045
0037:  MOVLW  01
0038:  MOVWF  78
0039:  CLRF   77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  DECFSZ 78,F
003D:  GOTO   039
003E:  MOVLW  4A
003F:  MOVWF  77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  GOTO   043
0043:  DECFSZ 00,F
0044:  GOTO   037
0045:  RETURN
.................... #define  LCD_ENABLE_PIN  PIN_A3                                   
.................... #define  LCD_RS_PIN      PIN_A5                                   
.................... #define  LCD_RW_PIN      PIN_A2    
.................... #define  LCD_DATA4       PIN_D4                                    
.................... #define  LCD_DATA5       PIN_D5                                     
.................... #define  LCD_DATA6       PIN_D6                                     
.................... #define  LCD_DATA7       PIN_D7    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00AA:  BSF    08.4
....................    output_float(LCD_DATA5); 
00AB:  BSF    08.5
....................    output_float(LCD_DATA6); 
00AC:  BSF    08.6
....................    output_float(LCD_DATA7); 
00AD:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AE:  BCF    03.5
00AF:  BSF    05.2
00B0:  BSF    03.5
00B1:  BCF    05.2
....................    delay_cycles(1); 
00B2:  NOP
....................    lcd_output_enable(1); 
00B3:  BCF    03.5
00B4:  BSF    05.3
00B5:  BSF    03.5
00B6:  BCF    05.3
....................    delay_cycles(1); 
00B7:  NOP
....................    high = lcd_read_nibble(); 
00B8:  BCF    03.5
00B9:  CALL   071
00BA:  MOVF   78,W
00BB:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
00BC:  BCF    05.3
00BD:  BSF    03.5
00BE:  BCF    05.3
....................    delay_cycles(1); 
00BF:  NOP
....................    lcd_output_enable(1); 
00C0:  BCF    03.5
00C1:  BSF    05.3
00C2:  BSF    03.5
00C3:  BCF    05.3
....................    delay_us(1); 
00C4:  NOP
....................    low = lcd_read_nibble(); 
00C5:  BCF    03.5
00C6:  CALL   071
00C7:  MOVF   78,W
00C8:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
00C9:  BCF    05.3
00CA:  BSF    03.5
00CB:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CC:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00CD:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00CE:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00CF:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D0:  BCF    03.5
00D1:  SWAPF  2E,W
00D2:  MOVWF  77
00D3:  MOVLW  F0
00D4:  ANDWF  77,F
00D5:  MOVF   77,W
00D6:  IORWF  2D,W
00D7:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0071:  CLRF   2F
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0072:  BSF    03.5
0073:  BSF    08.4
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  08.4
0077:  MOVLW  01
0078:  IORWF  2F,F
....................    n |= input(LCD_DATA5) << 1; 
0079:  BSF    03.5
007A:  BSF    08.5
007B:  MOVLW  00
007C:  BCF    03.5
007D:  BTFSC  08.5
007E:  MOVLW  01
007F:  MOVWF  77
0080:  BCF    03.0
0081:  RLF    77,F
0082:  MOVF   77,W
0083:  IORWF  2F,F
....................    n |= input(LCD_DATA6) << 2; 
0084:  BSF    03.5
0085:  BSF    08.6
0086:  MOVLW  00
0087:  BCF    03.5
0088:  BTFSC  08.6
0089:  MOVLW  01
008A:  MOVWF  77
008B:  RLF    77,F
008C:  RLF    77,F
008D:  MOVLW  FC
008E:  ANDWF  77,F
008F:  MOVF   77,W
0090:  IORWF  2F,F
....................    n |= input(LCD_DATA7) << 3; 
0091:  BSF    03.5
0092:  BSF    08.7
0093:  MOVLW  00
0094:  BCF    03.5
0095:  BTFSC  08.7
0096:  MOVLW  01
0097:  MOVWF  77
0098:  RLF    77,F
0099:  RLF    77,F
009A:  RLF    77,F
009B:  MOVLW  F8
009C:  ANDWF  77,F
009D:  MOVF   77,W
009E:  IORWF  2F,F
....................     
....................    return(n); 
009F:  MOVF   2F,W
00A0:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00A1:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0046:  BTFSC  2E.0
0047:  GOTO   04A
0048:  BCF    08.4
0049:  GOTO   04B
004A:  BSF    08.4
004B:  BSF    03.5
004C:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
004D:  BCF    03.5
004E:  BTFSC  2E.1
004F:  GOTO   052
0050:  BCF    08.5
0051:  GOTO   053
0052:  BSF    08.5
0053:  BSF    03.5
0054:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0055:  BCF    03.5
0056:  BTFSC  2E.2
0057:  GOTO   05A
0058:  BCF    08.6
0059:  GOTO   05B
005A:  BSF    08.6
005B:  BSF    03.5
005C:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
005D:  BCF    03.5
005E:  BTFSC  2E.3
005F:  GOTO   062
0060:  BCF    08.7
0061:  GOTO   063
0062:  BSF    08.7
0063:  BSF    03.5
0064:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(1); 
0066:  BCF    03.5
0067:  BSF    05.3
0068:  BSF    03.5
0069:  BCF    05.3
....................    delay_us(2); 
006A:  GOTO   06B
....................    lcd_output_enable(0); 
006B:  BCF    03.5
006C:  BCF    05.3
006D:  BSF    03.5
006E:  BCF    05.3
.................... } 
006F:  BCF    03.5
0070:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A2:  BSF    03.5
00A3:  BCF    05.3
....................    lcd_rs_tris(); 
00A4:  BCF    05.5
....................    lcd_rw_tris(); 
00A5:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A6:  BCF    03.5
00A7:  BCF    05.5
00A8:  BSF    03.5
00A9:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D8:  MOVF   78,W
00D9:  MOVWF  2D
00DA:  BTFSS  2D.7
00DB:  GOTO   0DE
00DC:  BSF    03.5
00DD:  GOTO   0AA
....................    lcd_output_rs(address); 
00DE:  MOVF   2B,F
00DF:  BTFSS  03.2
00E0:  GOTO   0E3
00E1:  BCF    05.5
00E2:  GOTO   0E4
00E3:  BSF    05.5
00E4:  BSF    03.5
00E5:  BCF    05.5
....................    delay_cycles(1); 
00E6:  NOP
....................    lcd_output_rw(0); 
00E7:  BCF    03.5
00E8:  BCF    05.2
00E9:  BSF    03.5
00EA:  BCF    05.2
....................    delay_cycles(1); 
00EB:  NOP
....................    lcd_output_enable(0); 
00EC:  BCF    03.5
00ED:  BCF    05.3
00EE:  BSF    03.5
00EF:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
00F0:  BCF    03.5
00F1:  SWAPF  2C,W
00F2:  MOVWF  2D
00F3:  MOVLW  0F
00F4:  ANDWF  2D,F
00F5:  MOVF   2D,W
00F6:  MOVWF  2E
00F7:  CALL   046
....................    lcd_send_nibble(n & 0xf); 
00F8:  MOVF   2C,W
00F9:  ANDLW  0F
00FA:  MOVWF  2D
00FB:  MOVWF  2E
00FC:  CALL   046
.................... } 
00FD:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FE:  BSF    03.5
00FF:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0100:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0101:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0102:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0103:  BCF    05.3
....................    lcd_rs_tris(); 
0104:  BCF    05.5
....................    lcd_rw_tris(); 
0105:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0106:  BCF    03.5
0107:  BCF    05.5
0108:  BSF    03.5
0109:  BCF    05.5
....................    lcd_output_rw(0); 
010A:  BCF    03.5
010B:  BCF    05.2
010C:  BSF    03.5
010D:  BCF    05.2
....................    lcd_output_enable(0); 
010E:  BCF    03.5
010F:  BCF    05.3
0110:  BSF    03.5
0111:  BCF    05.3
....................      
....................    delay_ms(15); 
0112:  MOVLW  0F
0113:  BCF    03.5
0114:  MOVWF  27
0115:  CALL   031
....................    for(i=1;i<=3;++i) 
0116:  MOVLW  01
0117:  MOVWF  22
0118:  MOVF   22,W
0119:  SUBLW  03
011A:  BTFSS  03.0
011B:  GOTO   126
....................    { 
....................        lcd_send_nibble(3); 
011C:  MOVLW  03
011D:  MOVWF  2E
011E:  CALL   046
....................        lcd_send_nibble(0); 
011F:  CLRF   2E
0120:  CALL   046
....................        delay_ms(5); 
0121:  MOVLW  05
0122:  MOVWF  27
0123:  CALL   031
....................    } 
0124:  INCF   22,F
0125:  GOTO   118
....................     
....................    lcd_send_nibble(2); 
0126:  MOVLW  02
0127:  MOVWF  2E
0128:  CALL   046
....................    lcd_send_nibble(0); 
0129:  CLRF   2E
012A:  CALL   046
....................    delay_ms(5); 
012B:  MOVLW  05
012C:  MOVWF  27
012D:  CALL   031
....................    for(i=0;i<=3;++i) 
012E:  CLRF   22
012F:  MOVF   22,W
0130:  SUBLW  03
0131:  BTFSS  03.0
0132:  GOTO   13C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0133:  MOVF   22,W
0134:  CALL   004
0135:  MOVWF  23
0136:  CLRF   2B
0137:  MOVF   23,W
0138:  MOVWF  2C
0139:  CALL   0A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013A:  INCF   22,F
013B:  GOTO   12F
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
013C:  BCF    0A.3
013D:  BCF    0A.4
013E:  GOTO   28E (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
013F:  DECFSZ 28,W
0140:  GOTO   142
0141:  GOTO   145
....................       address=LCD_LINE_TWO; 
0142:  MOVLW  40
0143:  MOVWF  29
....................    else 
0144:  GOTO   146
....................       address=0; 
0145:  CLRF   29
....................       
....................    address+=x-1; 
0146:  MOVLW  01
0147:  SUBWF  27,W
0148:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
0149:  MOVF   29,W
014A:  IORLW  80
014B:  MOVWF  2A
014C:  CLRF   2B
014D:  MOVF   2A,W
014E:  MOVWF  2C
014F:  CALL   0A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0150:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0151:  MOVF   26,W
0152:  XORLW  07
0153:  BTFSC  03.2
0154:  GOTO   15F
0155:  XORLW  0B
0156:  BTFSC  03.2
0157:  GOTO   164
0158:  XORLW  06
0159:  BTFSC  03.2
015A:  GOTO   16C
015B:  XORLW  02
015C:  BTFSC  03.2
015D:  GOTO   172
015E:  GOTO   177
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
015F:  MOVLW  01
0160:  MOVWF  27
0161:  MOVWF  28
0162:  CALL   13F
0163:  GOTO   17D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0164:  CLRF   2B
0165:  MOVLW  01
0166:  MOVWF  2C
0167:  CALL   0A2
....................                      delay_ms(2); 
0168:  MOVLW  02
0169:  MOVWF  27
016A:  CALL   031
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
016B:  GOTO   17D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
016C:  MOVLW  01
016D:  MOVWF  27
016E:  MOVLW  02
016F:  MOVWF  28
0170:  CALL   13F
0171:  GOTO   17D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0172:  CLRF   2B
0173:  MOVLW  10
0174:  MOVWF  2C
0175:  CALL   0A2
0176:  GOTO   17D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0177:  MOVLW  01
0178:  MOVWF  2B
0179:  MOVF   26,W
017A:  MOVWF  2C
017B:  CALL   0A2
017C:  GOTO   17D
....................      #endif 
....................    } 
.................... } 
017D:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "..\LaboTec\pwm.c" 
.................... #include "pwm.h" 
.................... #ifndef __SPI__ 
.................... #define __SPI__ 
....................  
.................... #define PWM_PRESCALER   T2_DIV_BY_16 
.................... #define PWM_POSTSCALER  1 
.................... #define PWM_PERIOD      62  
....................  
.................... #BYTE CCPR1L = 0x15 
.................... #BYTE PR2 = 0x92 
....................  
.................... struct  { 
....................    unsigned char T2CKPS0   :1; 
....................    unsigned char T2CKPS1   :1; 
....................    unsigned char TMR2ON    :1; 
....................    unsigned char TOUTPS0   :1; 
....................    unsigned char TOUTPS1   :1; 
....................    unsigned char TOUTPS2   :1; 
....................    unsigned char TOUTPS3   :1; 
.................... } T2CONbits; 
.................... #byte T2CONbits =  0x12 
....................  
.................... struct  { 
....................    unsigned char CCP1M0 :1; 
....................    unsigned char CCP1M1 :1; 
....................    unsigned char CCP1M2 :1; 
....................    unsigned char CCP1M3 :1; 
....................    unsigned char CCP1Y  :1; 
....................    unsigned char CCP1X  :1; 
.................... } CCP1CONbits; 
.................... #byte CCP1CONbits  =  0x17 
....................  
.................... struct  { 
....................    unsigned char TRISC0 :1; 
....................    unsigned char TRISC1 :1; 
....................    unsigned char TRISC2 :1; 
....................    unsigned char TRISC3 :1; 
....................    unsigned char TRISC4 :1; 
....................    unsigned char TRISC5 :1; 
....................    unsigned char TRISC6 :1; 
....................    unsigned char TRISC7 :1; 
.................... } TRISCbits; 
.................... #byte TRISCbits    =  0x87   
....................  
.................... void SetPWM1(int16 DutyCycle); 
.................... void pwm_init(void); 
.................... void pwm_init_register(void); 
....................  
.................... #endif 
....................  
....................  
.................... void SetPWM1(int16 DutyCycle){ 
....................  
....................     CCPR1L = (DutyCycle>>2); 
*
01C6:  RRF    23,W
01C7:  MOVWF  7A
01C8:  RRF    22,W
01C9:  MOVWF  79
01CA:  RRF    7A,F
01CB:  RRF    79,F
01CC:  MOVF   79,W
01CD:  MOVWF  15
....................  
....................     CCP1CONbits.CCP1X = ((DutyCycle & 2)>>1); 
01CE:  MOVF   22,W
01CF:  ANDLW  02
01D0:  MOVWF  24
01D1:  CLRF   25
01D2:  BCF    03.0
01D3:  RRF    25,W
01D4:  MOVWF  7A
01D5:  RRF    24,W
01D6:  MOVWF  79
01D7:  MOVWF  78
01D8:  BCF    17.5
01D9:  BTFSC  78.0
01DA:  BSF    17.5
....................     CCP1CONbits.CCP1Y = (DutyCycle & 1); 
01DB:  MOVF   22,W
01DC:  ANDLW  01
01DD:  MOVWF  77
01DE:  CLRF   7A
01DF:  BCF    17.4
01E0:  BTFSC  77.0
01E1:  BSF    17.4
.................... } 
01E2:  RETURN
....................  
.................... void pwm_init(){ 
....................    set_tris_c( 0b00000000 ); 
*
001A:  MOVLW  00
001B:  BSF    03.5
001C:  MOVWF  07
001D:  BCF    03.5
001E:  MOVWF  20
....................    setup_timer_2( PWM_PRESCALER ,PWM_PERIOD, PWM_POSTSCALER);    
001F:  MOVWF  78
0020:  IORLW  06
0021:  MOVWF  12
0022:  MOVLW  3E
0023:  BSF    03.5
0024:  MOVWF  12
....................    // PWM Period = (62+1)*4*(1/4Mhz)*16 = 1Khz 
....................    setup_ccp1(CCP_PWM);                // Enabled PWM1 
0025:  BCF    03.5
0026:  BCF    20.2
0027:  MOVF   20,W
0028:  BSF    03.5
0029:  MOVWF  07
002A:  BCF    03.5
002B:  BCF    07.2
002C:  MOVLW  0C
002D:  MOVWF  17
.................... } 
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   28D (RETURN)
....................  
.................... void pwm_init_register(void){ 
....................  
....................    // CONFIGURACION DEL PERIODO DE TIMER2 
....................    PR2 = 62; 
....................    // CICLO DE TRABAJO - 50% -> 0b0001111101 
....................    CCPR1L = 0b00011111; 
....................    CCP1CONbits.CCP1X = 0; 
....................    CCP1CONbits.CCP1Y = 1; 
....................    // PIN CCP1 COMO SALIDA 
....................    TRISCbits.TRISC2 = 0; 
....................    //  PRESCALER TIMER2 16 
....................    T2CONbits.T2CKPS0 = 1; 
....................    T2CONbits.T2CKPS1 = 1; 
....................    // MODULO CCPP EN MODO PWM 
....................    CCP1CONbits.CCP1M3 = 1; 
....................    CCP1CONbits.CCP1M2 = 1; 
....................    CCP1CONbits.CCP1M1 = 0; 
....................    CCP1CONbits.CCP1M0 = 0; 
....................    // HABILITO TIMER2 
....................    T2CONbits.TMR2ON = 1; 
....................  
....................  
.................... } 
....................  
....................  
.................... void main(){ 
*
0019:  DATA 00,00
*
027C:  CLRF   04
027D:  BCF    03.7
027E:  MOVLW  1F
027F:  ANDWF  03,F
0280:  MOVLW  FF
0281:  MOVWF  20
0282:  BSF    03.5
0283:  BSF    1F.0
0284:  BSF    1F.1
0285:  BSF    1F.2
0286:  BCF    1F.3
0287:  MOVLW  07
0288:  MOVWF  1C
0289:  MOVLW  7D
028A:  BCF    03.5
028B:  MOVWF  21
....................    int duty = 125; 
....................    
....................    pwm_init(); 
028C:  GOTO   01A
....................    lcd_init(); 
028D:  GOTO   0FE
....................  
....................    set_tris_b( 0b00000011 ); 
028E:  MOVLW  03
028F:  BSF    03.5
0290:  MOVWF  06
....................    printf(lcd_putc, "LABOTEC"); 
0291:  MOVLW  0C
0292:  BCF    03.5
0293:  BSF    03.6
0294:  MOVWF  0D
0295:  MOVLW  00
0296:  MOVWF  0F
0297:  BCF    03.6
0298:  GOTO   17E
....................     
....................    for(;;){ 
....................       if( input( PIN_B0 ) == 0 ){ 
0299:  BSF    03.5
029A:  BSF    06.0
029B:  BCF    03.5
029C:  BTFSC  06.0
029D:  GOTO   2B9
....................          delay_ms( 300 ); 
029E:  MOVLW  02
029F:  MOVWF  22
02A0:  MOVLW  96
02A1:  MOVWF  27
02A2:  CALL   031
02A3:  DECFSZ 22,F
02A4:  GOTO   2A0
....................          duty++; 
02A5:  INCF   21,F
....................          SetPWM1( duty ); 
02A6:  CLRF   23
02A7:  MOVF   21,W
02A8:  MOVWF  22
02A9:  CALL   1C6
....................          printf( lcd_putc, "\fDuty:%u", duty ); 
02AA:  MOVLW  10
02AB:  BSF    03.6
02AC:  MOVWF  0D
02AD:  MOVLW  00
02AE:  MOVWF  0F
02AF:  BCF    03.0
02B0:  MOVLW  06
02B1:  BCF    03.6
02B2:  MOVWF  22
02B3:  CALL   1E3
02B4:  MOVF   21,W
02B5:  MOVWF  22
02B6:  MOVLW  1B
02B7:  MOVWF  23
02B8:  CALL   247
....................       } 
....................        
....................       if( input( PIN_B1 ) == 0 ){ 
02B9:  BSF    03.5
02BA:  BSF    06.1
02BB:  BCF    03.5
02BC:  BTFSC  06.1
02BD:  GOTO   2D9
....................          delay_ms( 300 ); 
02BE:  MOVLW  02
02BF:  MOVWF  22
02C0:  MOVLW  96
02C1:  MOVWF  27
02C2:  CALL   031
02C3:  DECFSZ 22,F
02C4:  GOTO   2C0
....................          duty--; 
02C5:  DECF   21,F
....................          SetPWM1( duty ); 
02C6:  CLRF   23
02C7:  MOVF   21,W
02C8:  MOVWF  22
02C9:  CALL   1C6
....................          printf( lcd_putc, "\fDuty:%u", duty ); 
02CA:  MOVLW  15
02CB:  BSF    03.6
02CC:  MOVWF  0D
02CD:  MOVLW  00
02CE:  MOVWF  0F
02CF:  BCF    03.0
02D0:  MOVLW  06
02D1:  BCF    03.6
02D2:  MOVWF  22
02D3:  CALL   1E3
02D4:  MOVF   21,W
02D5:  MOVWF  22
02D6:  MOVLW  1B
02D7:  MOVWF  23
02D8:  CALL   247
....................       } 
....................    } 
02D9:  GOTO   299
.................... } 
....................  
....................  
....................  
02DA:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
