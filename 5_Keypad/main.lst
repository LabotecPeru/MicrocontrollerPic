CCS PCM C Compiler, Version 4.114, 93513558               18-Dic.-16 19:57

               Filename: C:\Users\COMPUTADORA\Desktop\MicrocontrollerPic\5_Keypad\main.lst

               ROM used: 729 words (9%)
                         Largest free fragment is 2048
               RAM used: 11 (3%) at main() level
                         25 (7%) worst case
               Stack:    5 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   28E
0003:  NOP
.................... #include "16f877a.h" 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses xt 
.................... #use delay(clock =4M) 
*
0032:  MOVLW  2A
0033:  MOVWF  04
0034:  BCF    03.7
0035:  MOVF   00,W
0036:  BTFSC  03.2
0037:  GOTO   046
0038:  MOVLW  01
0039:  MOVWF  78
003A:  CLRF   77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 78,F
003E:  GOTO   03A
003F:  MOVLW  4A
0040:  MOVWF  77
0041:  DECFSZ 77,F
0042:  GOTO   041
0043:  GOTO   044
0044:  DECFSZ 00,F
0045:  GOTO   038
0046:  RETURN
.................... #define LCD_ENABLE_PIN  PIN_A3                                   
.................... #define LCD_RS_PIN      PIN_A5                                   
.................... #define LCD_RW_PIN      PIN_A2                                    
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                     
.................... #define LCD_DATA7       PIN_D7  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00AB:  BSF    08.4
....................    output_float(LCD_DATA5); 
00AC:  BSF    08.5
....................    output_float(LCD_DATA6); 
00AD:  BSF    08.6
....................    output_float(LCD_DATA7); 
00AE:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AF:  BCF    03.5
00B0:  BSF    05.2
00B1:  BSF    03.5
00B2:  BCF    05.2
....................    delay_cycles(1); 
00B3:  NOP
....................    lcd_output_enable(1); 
00B4:  BCF    03.5
00B5:  BSF    05.3
00B6:  BSF    03.5
00B7:  BCF    05.3
....................    delay_cycles(1); 
00B8:  NOP
....................    high = lcd_read_nibble(); 
00B9:  BCF    03.5
00BA:  CALL   072
00BB:  MOVF   78,W
00BC:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
00BD:  BCF    05.3
00BE:  BSF    03.5
00BF:  BCF    05.3
....................    delay_cycles(1); 
00C0:  NOP
....................    lcd_output_enable(1); 
00C1:  BCF    03.5
00C2:  BSF    05.3
00C3:  BSF    03.5
00C4:  BCF    05.3
....................    delay_us(1); 
00C5:  NOP
....................    low = lcd_read_nibble(); 
00C6:  BCF    03.5
00C7:  CALL   072
00C8:  MOVF   78,W
00C9:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00CA:  BCF    05.3
00CB:  BSF    03.5
00CC:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CD:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00CE:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00CF:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00D0:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D1:  BCF    03.5
00D2:  SWAPF  31,W
00D3:  MOVWF  77
00D4:  MOVLW  F0
00D5:  ANDWF  77,F
00D6:  MOVF   77,W
00D7:  IORWF  30,W
00D8:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0072:  CLRF   32
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0073:  BSF    03.5
0074:  BSF    08.4
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.4
0078:  MOVLW  01
0079:  IORWF  32,F
....................    n |= input(LCD_DATA5) << 1; 
007A:  BSF    03.5
007B:  BSF    08.5
007C:  MOVLW  00
007D:  BCF    03.5
007E:  BTFSC  08.5
007F:  MOVLW  01
0080:  MOVWF  77
0081:  BCF    03.0
0082:  RLF    77,F
0083:  MOVF   77,W
0084:  IORWF  32,F
....................    n |= input(LCD_DATA6) << 2; 
0085:  BSF    03.5
0086:  BSF    08.6
0087:  MOVLW  00
0088:  BCF    03.5
0089:  BTFSC  08.6
008A:  MOVLW  01
008B:  MOVWF  77
008C:  RLF    77,F
008D:  RLF    77,F
008E:  MOVLW  FC
008F:  ANDWF  77,F
0090:  MOVF   77,W
0091:  IORWF  32,F
....................    n |= input(LCD_DATA7) << 3; 
0092:  BSF    03.5
0093:  BSF    08.7
0094:  MOVLW  00
0095:  BCF    03.5
0096:  BTFSC  08.7
0097:  MOVLW  01
0098:  MOVWF  77
0099:  RLF    77,F
009A:  RLF    77,F
009B:  RLF    77,F
009C:  MOVLW  F8
009D:  ANDWF  77,F
009E:  MOVF   77,W
009F:  IORWF  32,F
....................     
....................    return(n); 
00A0:  MOVF   32,W
00A1:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00A2:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0047:  BTFSC  31.0
0048:  GOTO   04B
0049:  BCF    08.4
004A:  GOTO   04C
004B:  BSF    08.4
004C:  BSF    03.5
004D:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
004E:  BCF    03.5
004F:  BTFSC  31.1
0050:  GOTO   053
0051:  BCF    08.5
0052:  GOTO   054
0053:  BSF    08.5
0054:  BSF    03.5
0055:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0056:  BCF    03.5
0057:  BTFSC  31.2
0058:  GOTO   05B
0059:  BCF    08.6
005A:  GOTO   05C
005B:  BSF    08.6
005C:  BSF    03.5
005D:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
005E:  BCF    03.5
005F:  BTFSC  31.3
0060:  GOTO   063
0061:  BCF    08.7
0062:  GOTO   064
0063:  BSF    08.7
0064:  BSF    03.5
0065:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0066:  NOP
....................    lcd_output_enable(1); 
0067:  BCF    03.5
0068:  BSF    05.3
0069:  BSF    03.5
006A:  BCF    05.3
....................    delay_us(2); 
006B:  GOTO   06C
....................    lcd_output_enable(0); 
006C:  BCF    03.5
006D:  BCF    05.3
006E:  BSF    03.5
006F:  BCF    05.3
.................... } 
0070:  BCF    03.5
0071:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A3:  BSF    03.5
00A4:  BCF    05.3
....................    lcd_rs_tris(); 
00A5:  BCF    05.5
....................    lcd_rw_tris(); 
00A6:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A7:  BCF    03.5
00A8:  BCF    05.5
00A9:  BSF    03.5
00AA:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D9:  MOVF   78,W
00DA:  MOVWF  30
00DB:  BTFSS  30.7
00DC:  GOTO   0DF
00DD:  BSF    03.5
00DE:  GOTO   0AB
....................    lcd_output_rs(address); 
00DF:  MOVF   2E,F
00E0:  BTFSS  03.2
00E1:  GOTO   0E4
00E2:  BCF    05.5
00E3:  GOTO   0E5
00E4:  BSF    05.5
00E5:  BSF    03.5
00E6:  BCF    05.5
....................    delay_cycles(1); 
00E7:  NOP
....................    lcd_output_rw(0); 
00E8:  BCF    03.5
00E9:  BCF    05.2
00EA:  BSF    03.5
00EB:  BCF    05.2
....................    delay_cycles(1); 
00EC:  NOP
....................    lcd_output_enable(0); 
00ED:  BCF    03.5
00EE:  BCF    05.3
00EF:  BSF    03.5
00F0:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
00F1:  BCF    03.5
00F2:  SWAPF  2F,W
00F3:  MOVWF  30
00F4:  MOVLW  0F
00F5:  ANDWF  30,F
00F6:  MOVF   30,W
00F7:  MOVWF  31
00F8:  CALL   047
....................    lcd_send_nibble(n & 0xf); 
00F9:  MOVF   2F,W
00FA:  ANDLW  0F
00FB:  MOVWF  30
00FC:  MOVWF  31
00FD:  CALL   047
.................... } 
00FE:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FF:  BSF    03.5
0100:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0101:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0102:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0103:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0104:  BCF    05.3
....................    lcd_rs_tris(); 
0105:  BCF    05.5
....................    lcd_rw_tris(); 
0106:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0107:  BCF    03.5
0108:  BCF    05.5
0109:  BSF    03.5
010A:  BCF    05.5
....................    lcd_output_rw(0); 
010B:  BCF    03.5
010C:  BCF    05.2
010D:  BSF    03.5
010E:  BCF    05.2
....................    lcd_output_enable(0); 
010F:  BCF    03.5
0110:  BCF    05.3
0111:  BSF    03.5
0112:  BCF    05.3
....................      
....................    delay_ms(15); 
0113:  MOVLW  0F
0114:  BCF    03.5
0115:  MOVWF  2A
0116:  CALL   032
....................    for(i=1;i<=3;++i) 
0117:  MOVLW  01
0118:  MOVWF  25
0119:  MOVF   25,W
011A:  SUBLW  03
011B:  BTFSS  03.0
011C:  GOTO   127
....................    { 
....................        lcd_send_nibble(3); 
011D:  MOVLW  03
011E:  MOVWF  31
011F:  CALL   047
....................        lcd_send_nibble(0); 
0120:  CLRF   31
0121:  CALL   047
....................        delay_ms(5); 
0122:  MOVLW  05
0123:  MOVWF  2A
0124:  CALL   032
....................    } 
0125:  INCF   25,F
0126:  GOTO   119
....................     
....................    lcd_send_nibble(2); 
0127:  MOVLW  02
0128:  MOVWF  31
0129:  CALL   047
....................    lcd_send_nibble(0); 
012A:  CLRF   31
012B:  CALL   047
....................    delay_ms(5); 
012C:  MOVLW  05
012D:  MOVWF  2A
012E:  CALL   032
....................    for(i=0;i<=3;++i) 
012F:  CLRF   25
0130:  MOVF   25,W
0131:  SUBLW  03
0132:  BTFSS  03.0
0133:  GOTO   13D
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0134:  MOVF   25,W
0135:  CALL   004
0136:  MOVWF  26
0137:  CLRF   2E
0138:  MOVF   26,W
0139:  MOVWF  2F
013A:  CALL   0A3
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013B:  INCF   25,F
013C:  GOTO   130
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
013D:  BCF    0A.3
013E:  BCF    0A.4
013F:  GOTO   29F (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
0146:  DECFSZ 2B,W
0147:  GOTO   149
0148:  GOTO   14C
....................       address=LCD_LINE_TWO; 
0149:  MOVLW  40
014A:  MOVWF  2C
....................    else 
014B:  GOTO   14D
....................       address=0; 
014C:  CLRF   2C
....................       
....................    address+=x-1; 
014D:  MOVLW  01
014E:  SUBWF  2A,W
014F:  ADDWF  2C,F
....................    lcd_send_byte(0,0x80|address); 
0150:  MOVF   2C,W
0151:  IORLW  80
0152:  MOVWF  2D
0153:  CLRF   2E
0154:  MOVF   2D,W
0155:  MOVWF  2F
0156:  CALL   0A3
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0157:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0158:  MOVF   29,W
0159:  XORLW  07
015A:  BTFSC  03.2
015B:  GOTO   166
015C:  XORLW  0B
015D:  BTFSC  03.2
015E:  GOTO   16B
015F:  XORLW  06
0160:  BTFSC  03.2
0161:  GOTO   173
0162:  XORLW  02
0163:  BTFSC  03.2
0164:  GOTO   179
0165:  GOTO   17E
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0166:  MOVLW  01
0167:  MOVWF  2A
0168:  MOVWF  2B
0169:  CALL   146
016A:  GOTO   184
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
016B:  CLRF   2E
016C:  MOVLW  01
016D:  MOVWF  2F
016E:  CALL   0A3
....................                      delay_ms(2); 
016F:  MOVLW  02
0170:  MOVWF  2A
0171:  CALL   032
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0172:  GOTO   184
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0173:  MOVLW  01
0174:  MOVWF  2A
0175:  MOVLW  02
0176:  MOVWF  2B
0177:  CALL   146
0178:  GOTO   184
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0179:  CLRF   2E
017A:  MOVLW  10
017B:  MOVWF  2F
017C:  CALL   0A3
017D:  GOTO   184
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
017E:  MOVLW  01
017F:  MOVWF  2E
0180:  MOVF   29,W
0181:  MOVWF  2F
0182:  CALL   0A3
0183:  GOTO   184
....................      #endif 
....................    } 
.................... } 
0184:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "..\LaboTec\keypad.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     KBD_LIB.C by Redraven                         //// 
.................... ////                                                                   //// 
.................... ////                     Derived from KBDD.C                           //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81              // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83              // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                  // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... /* 
.................... //Keypad connection:   (for example column 0 is B0) 
....................  
.................... #define COL0 (1 << 0) // PIN_B0 
.................... #define COL1 (1 << 1) // PIN_B1 
.................... #define COL2 (1 << 2) // PIN_B2 
.................... #define COL3 (1 << 3) // PIN_B3 
....................  
.................... #define ROW0 (1 << 4) // PIN_B4 
.................... #define ROW1 (1 << 5) // PIN_B5 
.................... #define ROW2 (1 << 6) // PIN_B6 
.................... #define ROW3 (1 << 7) // PIN_B7 
.................... */ 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................       ////////////////////// 
....................       //Keypad connection:// 
....................       ////////////////////// 
....................       //      rb7 --> X1    //               
....................       //      rb6 --> X2     // 
....................       //      rb5 --> X3     // 
....................       //      rb4 --> X4     // 
....................       //                    // 
....................       //      rb3 --> Y1     // 
....................       //      rb2 --> Y2     // 
....................       //      rb1 --> Y3     // 
....................       //      rb0 --> Y4     // 
....................       ////////////////////// 
....................  
.................... #define COL0 (1 << 4) // PIN_B4 
.................... #define COL1 (1 << 5) // PIN_B5 
.................... #define COL2 (1 << 6) // PIN_B6 
.................... #define COL3 (1 << 7) // PIN_B7 
....................  
.................... #define ROW0 (1 << 3) // PIN_B3 
.................... #define ROW1 (1 << 2) // PIN_B2 
.................... #define ROW2 (1 << 1) // PIN_B1 
.................... #define ROW3 (1 << 0) // PIN_B0 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
.................... void kbd_init() { 
....................    port_b_pullups(true); 
*
0140:  BSF    03.5
0141:  BCF    01.7
.................... } 
0142:  BCF    03.5
0143:  BCF    0A.3
0144:  BCF    0A.4
0145:  GOTO   2A0 (RETURN)
....................  
.................... char kbd_getc( ) { 
....................    static byte kbd_call_count; 
*
0299:  BCF    03.5
029A:  CLRF   20
....................    static short int kbd_down; 
029B:  BCF    21.0
....................    static char last_key; 
029C:  CLRF   22
....................    static byte col; 
029D:  CLRF   23
....................  
....................    byte kchar; 
....................    byte row; 
....................  
....................    kchar='\0'; 
*
01CB:  CLRF   25
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
01CC:  INCF   20,F
01CD:  MOVF   20,W
01CE:  SUBLW  21
01CF:  BTFSC  03.0
01D0:  GOTO   22C
....................        switch (col) { 
01D1:  MOVF   23,W
01D2:  ADDLW  FC
01D3:  BTFSC  03.0
01D4:  GOTO   1EF
01D5:  ADDLW  04
01D6:  GOTO   235
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
01D7:  MOVLW  EF
01D8:  BSF    03.5
01D9:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
01DA:  BCF    03.5
01DB:  MOVWF  06
....................                     break; 
01DC:  GOTO   1EF
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
01DD:  MOVLW  DF
01DE:  BSF    03.5
01DF:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
01E0:  BCF    03.5
01E1:  MOVWF  06
....................                     break; 
01E2:  GOTO   1EF
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
01E3:  MOVLW  BF
01E4:  BSF    03.5
01E5:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
01E6:  BCF    03.5
01E7:  MOVWF  06
....................                     break; 
01E8:  GOTO   1EF
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
01E9:  MOVLW  7F
01EA:  BSF    03.5
01EB:  MOVWF  06
....................                     kbd=~COL3&ALL_PINS; 
01EC:  BCF    03.5
01ED:  MOVWF  06
....................                     break; 
01EE:  GOTO   1EF
....................        } 
....................  
....................        if(kbd_down) { 
01EF:  BTFSS  21.0
01F0:  GOTO   1FB
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
01F1:  MOVF   06,W
01F2:  ANDLW  0F
01F3:  SUBLW  0F
01F4:  BTFSS  03.2
01F5:  GOTO   1FA
....................            kbd_down=false; 
01F6:  BCF    21.0
....................            kchar=last_key; 
01F7:  MOVF   22,W
01F8:  MOVWF  25
....................            last_key='\0'; 
01F9:  CLRF   22
....................          } 
....................        } else { 
01FA:  GOTO   22B
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
01FB:  MOVF   06,W
01FC:  ANDLW  0F
01FD:  SUBLW  0F
01FE:  BTFSC  03.2
01FF:  GOTO   226
....................              if((kbd & ROW0)==0) 
0200:  MOVF   06,W
0201:  ANDLW  08
0202:  BTFSS  03.2
0203:  GOTO   206
....................                row=0; 
0204:  CLRF   26
....................              else if((kbd & ROW1)==0) 
0205:  GOTO   21A
0206:  MOVF   06,W
0207:  ANDLW  04
0208:  BTFSS  03.2
0209:  GOTO   20D
....................                row=1; 
020A:  MOVLW  01
020B:  MOVWF  26
....................              else if((kbd & ROW2)==0) 
020C:  GOTO   21A
020D:  MOVF   06,W
020E:  ANDLW  02
020F:  BTFSS  03.2
0210:  GOTO   214
....................                row=2; 
0211:  MOVLW  02
0212:  MOVWF  26
....................              else if((kbd & ROW3)==0) 
0213:  GOTO   21A
0214:  MOVF   06,W
0215:  ANDLW  01
0216:  BTFSS  03.2
0217:  GOTO   21A
....................                row=3; 
0218:  MOVLW  03
0219:  MOVWF  26
....................              last_key =KEYS[row][col]; 
021A:  RLF    26,W
021B:  MOVWF  77
021C:  RLF    77,F
021D:  MOVLW  FC
021E:  ANDWF  77,F
021F:  MOVF   77,W
0220:  ADDWF  23,W
0221:  CALL   00C
0222:  MOVWF  78
0223:  MOVWF  22
....................              kbd_down = true; 
0224:  BSF    21.0
....................           } else { 
0225:  GOTO   22B
....................              ++col; 
0226:  INCF   23,F
....................              if(col==4) 
0227:  MOVF   23,W
0228:  SUBLW  04
0229:  BTFSC  03.2
....................                col=0; 
022A:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
022B:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
022C:  MOVLW  FF
022D:  BSF    03.5
022E:  MOVWF  06
....................   return(kchar); 
022F:  BCF    03.5
0230:  MOVF   25,W
0231:  MOVWF  78
.................... } 
0232:  BCF    0A.3
0233:  BCF    0A.4
0234:  GOTO   2B2 (RETURN)
....................  
....................  
....................  
....................  
.................... void main(){ 
*
028E:  CLRF   04
028F:  BCF    03.7
0290:  MOVLW  1F
0291:  ANDWF  03,F
0292:  BSF    03.5
0293:  BSF    1F.0
0294:  BSF    1F.1
0295:  BSF    1F.2
0296:  BCF    1F.3
0297:  MOVLW  07
0298:  MOVWF  1C
....................    char tecla; 
....................    lcd_init(); 
*
029E:  GOTO   0FF
....................    kbd_init(); 
029F:  GOTO   140
....................    lcd_putc('\f'); 
02A0:  MOVLW  0C
02A1:  MOVWF  29
02A2:  CALL   158
....................    printf(lcd_putc,"LaboTecPeru"); 
02A3:  MOVLW  20
02A4:  BSF    03.6
02A5:  MOVWF  0D
02A6:  MOVLW  00
02A7:  MOVWF  0F
02A8:  BCF    03.6
02A9:  CALL   185
....................    delay_ms(500); 
02AA:  MOVLW  02
02AB:  MOVWF  25
02AC:  MOVLW  FA
02AD:  MOVWF  2A
02AE:  CALL   032
02AF:  DECFSZ 25,F
02B0:  GOTO   2AC
....................  
....................    for(;;){ 
....................     
....................       tecla = kbd_getc(); 
02B1:  GOTO   1CB
02B2:  MOVF   78,W
02B3:  MOVWF  24
....................        
....................       if(tecla!=0){ 
02B4:  MOVF   24,F
02B5:  BTFSC  03.2
02B6:  GOTO   2D7
....................          lcd_putc('\f'); 
02B7:  MOVLW  0C
02B8:  MOVWF  29
02B9:  CALL   158
....................          lcd_gotoxy(1,1); 
02BA:  MOVLW  01
02BB:  MOVWF  2A
02BC:  MOVWF  2B
02BD:  CALL   146
....................          printf(lcd_putc,"@LaboTecPeru"); 
02BE:  MOVLW  26
02BF:  BSF    03.6
02C0:  MOVWF  0D
02C1:  MOVLW  00
02C2:  MOVWF  0F
02C3:  BCF    03.6
02C4:  CALL   185
....................          lcd_gotoxy(1,2); 
02C5:  MOVLW  01
02C6:  MOVWF  2A
02C7:  MOVLW  02
02C8:  MOVWF  2B
02C9:  CALL   146
....................          printf(lcd_putc,"tecla:%c",tecla); 
02CA:  MOVLW  2D
02CB:  BSF    03.6
02CC:  MOVWF  0D
02CD:  MOVLW  00
02CE:  MOVWF  0F
02CF:  BCF    03.0
02D0:  MOVLW  06
02D1:  BCF    03.6
02D2:  MOVWF  25
02D3:  GOTO   23D
02D4:  MOVF   24,W
02D5:  MOVWF  29
02D6:  CALL   158
....................           
....................       } 
....................       
....................    } 
02D7:  GOTO   2B1
.................... } 
02D8:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
