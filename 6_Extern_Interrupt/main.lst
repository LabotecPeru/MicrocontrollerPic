CCS PCM C Compiler, Version 4.114, 93513558               18-Dic.-16 20:02

               Filename: C:\Users\COMPUTADORA\Desktop\MicrocontrollerPic\6_Extern_Interrupt\main.lst

               ROM used: 736 words (9%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         29 (8%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   287
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   037
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses   xt 
.................... #use     delay(clock=4M) 
*
004E:  MOVLW  2E
004F:  MOVWF  04
0050:  BCF    03.7
0051:  MOVF   00,W
0052:  BTFSC  03.2
0053:  GOTO   062
0054:  MOVLW  01
0055:  MOVWF  78
0056:  CLRF   77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  DECFSZ 78,F
005A:  GOTO   056
005B:  MOVLW  4A
005C:  MOVWF  77
005D:  DECFSZ 77,F
005E:  GOTO   05D
005F:  GOTO   060
0060:  DECFSZ 00,F
0061:  GOTO   054
0062:  RETURN
.................... #define  LCD_ENABLE_PIN  PIN_A3                                   
.................... #define  LCD_RS_PIN      PIN_A5                                   
.................... #define  LCD_RW_PIN      PIN_A2                                    
.................... #define  LCD_DATA4       PIN_D4 
.................... #define  LCD_DATA5       PIN_D5                                    
.................... #define  LCD_DATA6       PIN_D6                                     
.................... #define  LCD_DATA7       PIN_D7  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C7:  BSF    08.4
....................    output_float(LCD_DATA5); 
00C8:  BSF    08.5
....................    output_float(LCD_DATA6); 
00C9:  BSF    08.6
....................    output_float(LCD_DATA7); 
00CA:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00CB:  BCF    03.5
00CC:  BSF    05.2
00CD:  BSF    03.5
00CE:  BCF    05.2
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_enable(1); 
00D0:  BCF    03.5
00D1:  BSF    05.3
00D2:  BSF    03.5
00D3:  BCF    05.3
....................    delay_cycles(1); 
00D4:  NOP
....................    high = lcd_read_nibble(); 
00D5:  BCF    03.5
00D6:  CALL   08E
00D7:  MOVF   78,W
00D8:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00D9:  BCF    05.3
00DA:  BSF    03.5
00DB:  BCF    05.3
....................    delay_cycles(1); 
00DC:  NOP
....................    lcd_output_enable(1); 
00DD:  BCF    03.5
00DE:  BSF    05.3
00DF:  BSF    03.5
00E0:  BCF    05.3
....................    delay_us(1); 
00E1:  NOP
....................    low = lcd_read_nibble(); 
00E2:  BCF    03.5
00E3:  CALL   08E
00E4:  MOVF   78,W
00E5:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00E6:  BCF    05.3
00E7:  BSF    03.5
00E8:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E9:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00EA:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00EB:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00EC:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00ED:  BCF    03.5
00EE:  SWAPF  35,W
00EF:  MOVWF  77
00F0:  MOVLW  F0
00F1:  ANDWF  77,F
00F2:  MOVF   77,W
00F3:  IORWF  34,W
00F4:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
008E:  CLRF   36
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
008F:  BSF    03.5
0090:  BSF    08.4
0091:  MOVLW  00
0092:  BCF    03.5
0093:  BTFSC  08.4
0094:  MOVLW  01
0095:  IORWF  36,F
....................    n |= input(LCD_DATA5) << 1; 
0096:  BSF    03.5
0097:  BSF    08.5
0098:  MOVLW  00
0099:  BCF    03.5
009A:  BTFSC  08.5
009B:  MOVLW  01
009C:  MOVWF  77
009D:  BCF    03.0
009E:  RLF    77,F
009F:  MOVF   77,W
00A0:  IORWF  36,F
....................    n |= input(LCD_DATA6) << 2; 
00A1:  BSF    03.5
00A2:  BSF    08.6
00A3:  MOVLW  00
00A4:  BCF    03.5
00A5:  BTFSC  08.6
00A6:  MOVLW  01
00A7:  MOVWF  77
00A8:  RLF    77,F
00A9:  RLF    77,F
00AA:  MOVLW  FC
00AB:  ANDWF  77,F
00AC:  MOVF   77,W
00AD:  IORWF  36,F
....................    n |= input(LCD_DATA7) << 3; 
00AE:  BSF    03.5
00AF:  BSF    08.7
00B0:  MOVLW  00
00B1:  BCF    03.5
00B2:  BTFSC  08.7
00B3:  MOVLW  01
00B4:  MOVWF  77
00B5:  RLF    77,F
00B6:  RLF    77,F
00B7:  RLF    77,F
00B8:  MOVLW  F8
00B9:  ANDWF  77,F
00BA:  MOVF   77,W
00BB:  IORWF  36,F
....................     
....................    return(n); 
00BC:  MOVF   36,W
00BD:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00BE:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0063:  BTFSC  35.0
0064:  GOTO   067
0065:  BCF    08.4
0066:  GOTO   068
0067:  BSF    08.4
0068:  BSF    03.5
0069:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
006A:  BCF    03.5
006B:  BTFSC  35.1
006C:  GOTO   06F
006D:  BCF    08.5
006E:  GOTO   070
006F:  BSF    08.5
0070:  BSF    03.5
0071:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0072:  BCF    03.5
0073:  BTFSC  35.2
0074:  GOTO   077
0075:  BCF    08.6
0076:  GOTO   078
0077:  BSF    08.6
0078:  BSF    03.5
0079:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
007A:  BCF    03.5
007B:  BTFSC  35.3
007C:  GOTO   07F
007D:  BCF    08.7
007E:  GOTO   080
007F:  BSF    08.7
0080:  BSF    03.5
0081:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0082:  NOP
....................    lcd_output_enable(1); 
0083:  BCF    03.5
0084:  BSF    05.3
0085:  BSF    03.5
0086:  BCF    05.3
....................    delay_us(2); 
0087:  GOTO   088
....................    lcd_output_enable(0); 
0088:  BCF    03.5
0089:  BCF    05.3
008A:  BSF    03.5
008B:  BCF    05.3
.................... } 
008C:  BCF    03.5
008D:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00BF:  BSF    03.5
00C0:  BCF    05.3
....................    lcd_rs_tris(); 
00C1:  BCF    05.5
....................    lcd_rw_tris(); 
00C2:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00C3:  BCF    03.5
00C4:  BCF    05.5
00C5:  BSF    03.5
00C6:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F5:  MOVF   78,W
00F6:  MOVWF  34
00F7:  BTFSS  34.7
00F8:  GOTO   0FB
00F9:  BSF    03.5
00FA:  GOTO   0C7
....................    lcd_output_rs(address); 
00FB:  MOVF   32,F
00FC:  BTFSS  03.2
00FD:  GOTO   100
00FE:  BCF    05.5
00FF:  GOTO   101
0100:  BSF    05.5
0101:  BSF    03.5
0102:  BCF    05.5
....................    delay_cycles(1); 
0103:  NOP
....................    lcd_output_rw(0); 
0104:  BCF    03.5
0105:  BCF    05.2
0106:  BSF    03.5
0107:  BCF    05.2
....................    delay_cycles(1); 
0108:  NOP
....................    lcd_output_enable(0); 
0109:  BCF    03.5
010A:  BCF    05.3
010B:  BSF    03.5
010C:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
010D:  BCF    03.5
010E:  SWAPF  33,W
010F:  MOVWF  34
0110:  MOVLW  0F
0111:  ANDWF  34,F
0112:  MOVF   34,W
0113:  MOVWF  35
0114:  CALL   063
....................    lcd_send_nibble(n & 0xf); 
0115:  MOVF   33,W
0116:  ANDLW  0F
0117:  MOVWF  34
0118:  MOVWF  35
0119:  CALL   063
.................... } 
011A:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
011B:  BSF    03.5
011C:  BCF    08.4
....................    output_drive(LCD_DATA5); 
011D:  BCF    08.5
....................    output_drive(LCD_DATA6); 
011E:  BCF    08.6
....................    output_drive(LCD_DATA7); 
011F:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0120:  BCF    05.3
....................    lcd_rs_tris(); 
0121:  BCF    05.5
....................    lcd_rw_tris(); 
0122:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0123:  BCF    03.5
0124:  BCF    05.5
0125:  BSF    03.5
0126:  BCF    05.5
....................    lcd_output_rw(0); 
0127:  BCF    03.5
0128:  BCF    05.2
0129:  BSF    03.5
012A:  BCF    05.2
....................    lcd_output_enable(0); 
012B:  BCF    03.5
012C:  BCF    05.3
012D:  BSF    03.5
012E:  BCF    05.3
....................      
....................    delay_ms(15); 
012F:  MOVLW  0F
0130:  BCF    03.5
0131:  MOVWF  2E
0132:  CALL   04E
....................    for(i=1;i<=3;++i) 
0133:  MOVLW  01
0134:  MOVWF  29
0135:  MOVF   29,W
0136:  SUBLW  03
0137:  BTFSS  03.0
0138:  GOTO   143
....................    { 
....................        lcd_send_nibble(3); 
0139:  MOVLW  03
013A:  MOVWF  35
013B:  CALL   063
....................        lcd_send_nibble(0); 
013C:  CLRF   35
013D:  CALL   063
....................        delay_ms(5); 
013E:  MOVLW  05
013F:  MOVWF  2E
0140:  CALL   04E
....................    } 
0141:  INCF   29,F
0142:  GOTO   135
....................     
....................    lcd_send_nibble(2); 
0143:  MOVLW  02
0144:  MOVWF  35
0145:  CALL   063
....................    lcd_send_nibble(0); 
0146:  CLRF   35
0147:  CALL   063
....................    delay_ms(5); 
0148:  MOVLW  05
0149:  MOVWF  2E
014A:  CALL   04E
....................    for(i=0;i<=3;++i) 
014B:  CLRF   29
014C:  MOVF   29,W
014D:  SUBLW  03
014E:  BTFSS  03.0
014F:  GOTO   159
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0150:  MOVF   29,W
0151:  CALL   02F
0152:  MOVWF  2A
0153:  CLRF   32
0154:  MOVF   2A,W
0155:  MOVWF  33
0156:  CALL   0BF
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0157:  INCF   29,F
0158:  GOTO   14C
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   295 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
0165:  DECFSZ 2F,W
0166:  GOTO   168
0167:  GOTO   16B
....................       address=LCD_LINE_TWO; 
0168:  MOVLW  40
0169:  MOVWF  30
....................    else 
016A:  GOTO   16C
....................       address=0; 
016B:  CLRF   30
....................       
....................    address+=x-1; 
016C:  MOVLW  01
016D:  SUBWF  2E,W
016E:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
016F:  MOVF   30,W
0170:  IORLW  80
0171:  MOVWF  31
0172:  CLRF   32
0173:  MOVF   31,W
0174:  MOVWF  33
0175:  CALL   0BF
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0176:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0177:  MOVF   2D,W
0178:  XORLW  07
0179:  BTFSC  03.2
017A:  GOTO   185
017B:  XORLW  0B
017C:  BTFSC  03.2
017D:  GOTO   18A
017E:  XORLW  06
017F:  BTFSC  03.2
0180:  GOTO   192
0181:  XORLW  02
0182:  BTFSC  03.2
0183:  GOTO   198
0184:  GOTO   19D
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0185:  MOVLW  01
0186:  MOVWF  2E
0187:  MOVWF  2F
0188:  CALL   165
0189:  GOTO   1A3
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
018A:  CLRF   32
018B:  MOVLW  01
018C:  MOVWF  33
018D:  CALL   0BF
....................                      delay_ms(2); 
018E:  MOVLW  02
018F:  MOVWF  2E
0190:  CALL   04E
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0191:  GOTO   1A3
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0192:  MOVLW  01
0193:  MOVWF  2E
0194:  MOVLW  02
0195:  MOVWF  2F
0196:  CALL   165
0197:  GOTO   1A3
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0198:  CLRF   32
0199:  MOVLW  10
019A:  MOVWF  33
019B:  CALL   0BF
019C:  GOTO   1A3
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
019D:  MOVLW  01
019E:  MOVWF  32
019F:  MOVF   2D,W
01A0:  MOVWF  33
01A1:  CALL   0BF
01A2:  GOTO   1A3
....................      #endif 
....................    } 
.................... } 
01A3:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "..\LaboTec\extern_interrupt.c" 
.................... #include "extern_interrupt.h" 
.................... #ifndef  __ULTRASONICO__ 
.................... #define  __ULTRASONICO__ 
....................  
.................... #define  RISING_EDGE    L_TO_H 
.................... #define  FALLING_EDGE   H_TO_L 
....................  
.................... void externinterrupt_init(); 
....................  
.................... #endif 
....................  
....................  
.................... int var_externinterrupt = 0; 
....................  
.................... #INT_EXT 
.................... void INT_EXT_isr(){ 
....................    var_externinterrupt = 1; 
*
0037:  MOVLW  01
0038:  MOVWF  27
.................... } 
....................  
0039:  BCF    0B.1
003A:  BCF    0A.3
003B:  BCF    0A.4
003C:  GOTO   01B
.................... void externinterrupt_init(){ 
....................    ext_int_edge( FALLING_EDGE ); 
*
015C:  BSF    03.5
015D:  BCF    01.6
....................    enable_interrupts( INT_EXT ); 
015E:  BCF    03.5
015F:  BSF    0B.4
....................    enable_interrupts( GLOBAL ); 
0160:  MOVLW  C0
0161:  IORWF  0B,F
.................... } 
0162:  BCF    0A.3
0163:  BCF    0A.4
0164:  GOTO   296 (RETURN)
....................  
....................  
.................... void main(){ 
*
004D:  DATA 00,00
*
0287:  CLRF   04
0288:  BCF    03.7
0289:  MOVLW  1F
028A:  ANDWF  03,F
028B:  CLRF   27
028C:  BSF    03.5
028D:  BSF    1F.0
028E:  BSF    1F.1
028F:  BSF    1F.2
0290:  BCF    1F.3
0291:  MOVLW  07
0292:  MOVWF  1C
....................    int i; 
....................    lcd_init(); 
0293:  BCF    03.5
0294:  GOTO   11B
....................    externinterrupt_init(); 
0295:  GOTO   15C
....................    lcd_putc('\f'); 
0296:  MOVLW  0C
0297:  MOVWF  2D
0298:  CALL   177
....................    printf(lcd_putc,"LaboTecPeru"); 
0299:  MOVLW  3D
029A:  BSF    03.6
029B:  MOVWF  0D
029C:  MOVLW  00
029D:  MOVWF  0F
029E:  BCF    03.6
029F:  CALL   1A4
....................    delay_ms(500); 
02A0:  MOVLW  02
02A1:  MOVWF  29
02A2:  MOVLW  FA
02A3:  MOVWF  2E
02A4:  CALL   04E
02A5:  DECFSZ 29,F
02A6:  GOTO   2A2
....................    lcd_putc('\f'); 
02A7:  MOVLW  0C
02A8:  MOVWF  2D
02A9:  CALL   177
....................    for(;;){ 
....................       for(i=0;i<=100;i++){ 
02AA:  CLRF   28
02AB:  MOVF   28,W
02AC:  SUBLW  64
02AD:  BTFSS  03.0
02AE:  GOTO   2DE
....................          printf(lcd_putc,"Count:%u",i); 
02AF:  MOVLW  43
02B0:  BSF    03.6
02B1:  MOVWF  0D
02B2:  MOVLW  00
02B3:  MOVWF  0F
02B4:  BCF    03.0
02B5:  MOVLW  06
02B6:  BCF    03.6
02B7:  MOVWF  29
02B8:  GOTO   1EA
02B9:  MOVF   28,W
02BA:  MOVWF  29
02BB:  MOVLW  1B
02BC:  MOVWF  2A
02BD:  GOTO   250
....................          delay_ms(1000); 
02BE:  MOVLW  04
02BF:  MOVWF  29
02C0:  MOVLW  FA
02C1:  MOVWF  2E
02C2:  CALL   04E
02C3:  DECFSZ 29,F
02C4:  GOTO   2C0
....................          lcd_putc('\f'); 
02C5:  MOVLW  0C
02C6:  MOVWF  2D
02C7:  CALL   177
....................          if(var_externinterrupt == 1){ 
02C8:  DECFSZ 27,W
02C9:  GOTO   2DC
....................             printf(lcd_putc,"\fINTERRUPT"); 
02CA:  MOVLW  48
02CB:  BSF    03.6
02CC:  MOVWF  0D
02CD:  MOVLW  00
02CE:  MOVWF  0F
02CF:  BCF    03.6
02D0:  CALL   1A4
....................             delay_ms(300); 
02D1:  MOVLW  02
02D2:  MOVWF  29
02D3:  MOVLW  96
02D4:  MOVWF  2E
02D5:  CALL   04E
02D6:  DECFSZ 29,F
02D7:  GOTO   2D3
....................             lcd_putc('\f'); 
02D8:  MOVLW  0C
02D9:  MOVWF  2D
02DA:  CALL   177
....................             var_externinterrupt = 0; 
02DB:  CLRF   27
....................          } 
....................       } 
02DC:  INCF   28,F
02DD:  GOTO   2AB
....................    } 
02DE:  GOTO   2AA
....................  
.................... } 
....................  
....................  
02DF:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
