CCS PCM C Compiler, Version 4.114, 93513558               18-Dic.-16 20:06

               Filename: C:\Users\COMPUTADORA\Desktop\MicrocontrollerPic\13_Adc\main.lst

               ROM used: 731 words (9%)
                         Largest free fragment is 2048
               RAM used: 8 (2%) at main() level
                         27 (7%) worst case
               Stack:    5 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   27C
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses   XT 
.................... #DEVICE  ADC = 10 
.................... #use     delay(CLOCK = 4M)                                  
*
0033:  MOVLW  2D
0034:  MOVWF  04
0035:  BCF    03.7
0036:  MOVF   00,W
0037:  BTFSC  03.2
0038:  GOTO   047
0039:  MOVLW  01
003A:  MOVWF  78
003B:  CLRF   77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  DECFSZ 78,F
003F:  GOTO   03B
0040:  MOVLW  4A
0041:  MOVWF  77
0042:  DECFSZ 77,F
0043:  GOTO   042
0044:  GOTO   045
0045:  DECFSZ 00,F
0046:  GOTO   039
0047:  RETURN
.................... #define  LCD_ENABLE_PIN  PIN_A3                                   
.................... #define  LCD_RS_PIN      PIN_A5                                   
.................... #define  LCD_RW_PIN      PIN_A2    
.................... #define  LCD_DATA4       PIN_D4                                    
.................... #define  LCD_DATA5       PIN_D5                                     
.................... #define  LCD_DATA6       PIN_D6                                     
.................... #define  LCD_DATA7       PIN_D7    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00AC:  BSF    08.4
....................    output_float(LCD_DATA5); 
00AD:  BSF    08.5
....................    output_float(LCD_DATA6); 
00AE:  BSF    08.6
....................    output_float(LCD_DATA7); 
00AF:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00B0:  BCF    03.5
00B1:  BSF    05.2
00B2:  BSF    03.5
00B3:  BCF    05.2
....................    delay_cycles(1); 
00B4:  NOP
....................    lcd_output_enable(1); 
00B5:  BCF    03.5
00B6:  BSF    05.3
00B7:  BSF    03.5
00B8:  BCF    05.3
....................    delay_cycles(1); 
00B9:  NOP
....................    high = lcd_read_nibble(); 
00BA:  BCF    03.5
00BB:  CALL   073
00BC:  MOVF   78,W
00BD:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00BE:  BCF    05.3
00BF:  BSF    03.5
00C0:  BCF    05.3
....................    delay_cycles(1); 
00C1:  NOP
....................    lcd_output_enable(1); 
00C2:  BCF    03.5
00C3:  BSF    05.3
00C4:  BSF    03.5
00C5:  BCF    05.3
....................    delay_us(1); 
00C6:  NOP
....................    low = lcd_read_nibble(); 
00C7:  BCF    03.5
00C8:  CALL   073
00C9:  MOVF   78,W
00CA:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
00CB:  BCF    05.3
00CC:  BSF    03.5
00CD:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CE:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00CF:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00D0:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00D1:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D2:  BCF    03.5
00D3:  SWAPF  34,W
00D4:  MOVWF  77
00D5:  MOVLW  F0
00D6:  ANDWF  77,F
00D7:  MOVF   77,W
00D8:  IORWF  33,W
00D9:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0073:  CLRF   35
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0074:  BSF    03.5
0075:  BSF    08.4
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  08.4
0079:  MOVLW  01
007A:  IORWF  35,F
....................    n |= input(LCD_DATA5) << 1; 
007B:  BSF    03.5
007C:  BSF    08.5
007D:  MOVLW  00
007E:  BCF    03.5
007F:  BTFSC  08.5
0080:  MOVLW  01
0081:  MOVWF  77
0082:  BCF    03.0
0083:  RLF    77,F
0084:  MOVF   77,W
0085:  IORWF  35,F
....................    n |= input(LCD_DATA6) << 2; 
0086:  BSF    03.5
0087:  BSF    08.6
0088:  MOVLW  00
0089:  BCF    03.5
008A:  BTFSC  08.6
008B:  MOVLW  01
008C:  MOVWF  77
008D:  RLF    77,F
008E:  RLF    77,F
008F:  MOVLW  FC
0090:  ANDWF  77,F
0091:  MOVF   77,W
0092:  IORWF  35,F
....................    n |= input(LCD_DATA7) << 3; 
0093:  BSF    03.5
0094:  BSF    08.7
0095:  MOVLW  00
0096:  BCF    03.5
0097:  BTFSC  08.7
0098:  MOVLW  01
0099:  MOVWF  77
009A:  RLF    77,F
009B:  RLF    77,F
009C:  RLF    77,F
009D:  MOVLW  F8
009E:  ANDWF  77,F
009F:  MOVF   77,W
00A0:  IORWF  35,F
....................     
....................    return(n); 
00A1:  MOVF   35,W
00A2:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00A3:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0048:  BTFSC  34.0
0049:  GOTO   04C
004A:  BCF    08.4
004B:  GOTO   04D
004C:  BSF    08.4
004D:  BSF    03.5
004E:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
004F:  BCF    03.5
0050:  BTFSC  34.1
0051:  GOTO   054
0052:  BCF    08.5
0053:  GOTO   055
0054:  BSF    08.5
0055:  BSF    03.5
0056:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0057:  BCF    03.5
0058:  BTFSC  34.2
0059:  GOTO   05C
005A:  BCF    08.6
005B:  GOTO   05D
005C:  BSF    08.6
005D:  BSF    03.5
005E:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
005F:  BCF    03.5
0060:  BTFSC  34.3
0061:  GOTO   064
0062:  BCF    08.7
0063:  GOTO   065
0064:  BSF    08.7
0065:  BSF    03.5
0066:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_enable(1); 
0068:  BCF    03.5
0069:  BSF    05.3
006A:  BSF    03.5
006B:  BCF    05.3
....................    delay_us(2); 
006C:  GOTO   06D
....................    lcd_output_enable(0); 
006D:  BCF    03.5
006E:  BCF    05.3
006F:  BSF    03.5
0070:  BCF    05.3
.................... } 
0071:  BCF    03.5
0072:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A4:  BSF    03.5
00A5:  BCF    05.3
....................    lcd_rs_tris(); 
00A6:  BCF    05.5
....................    lcd_rw_tris(); 
00A7:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A8:  BCF    03.5
00A9:  BCF    05.5
00AA:  BSF    03.5
00AB:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00DA:  MOVF   78,W
00DB:  MOVWF  33
00DC:  BTFSS  33.7
00DD:  GOTO   0E0
00DE:  BSF    03.5
00DF:  GOTO   0AC
....................    lcd_output_rs(address); 
00E0:  MOVF   31,F
00E1:  BTFSS  03.2
00E2:  GOTO   0E5
00E3:  BCF    05.5
00E4:  GOTO   0E6
00E5:  BSF    05.5
00E6:  BSF    03.5
00E7:  BCF    05.5
....................    delay_cycles(1); 
00E8:  NOP
....................    lcd_output_rw(0); 
00E9:  BCF    03.5
00EA:  BCF    05.2
00EB:  BSF    03.5
00EC:  BCF    05.2
....................    delay_cycles(1); 
00ED:  NOP
....................    lcd_output_enable(0); 
00EE:  BCF    03.5
00EF:  BCF    05.3
00F0:  BSF    03.5
00F1:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
00F2:  BCF    03.5
00F3:  SWAPF  32,W
00F4:  MOVWF  33
00F5:  MOVLW  0F
00F6:  ANDWF  33,F
00F7:  MOVF   33,W
00F8:  MOVWF  34
00F9:  CALL   048
....................    lcd_send_nibble(n & 0xf); 
00FA:  MOVF   32,W
00FB:  ANDLW  0F
00FC:  MOVWF  33
00FD:  MOVWF  34
00FE:  CALL   048
.................... } 
00FF:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0100:  BSF    03.5
0101:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0102:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0103:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0104:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0105:  BCF    05.3
....................    lcd_rs_tris(); 
0106:  BCF    05.5
....................    lcd_rw_tris(); 
0107:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0108:  BCF    03.5
0109:  BCF    05.5
010A:  BSF    03.5
010B:  BCF    05.5
....................    lcd_output_rw(0); 
010C:  BCF    03.5
010D:  BCF    05.2
010E:  BSF    03.5
010F:  BCF    05.2
....................    lcd_output_enable(0); 
0110:  BCF    03.5
0111:  BCF    05.3
0112:  BSF    03.5
0113:  BCF    05.3
....................      
....................    delay_ms(15); 
0114:  MOVLW  0F
0115:  BCF    03.5
0116:  MOVWF  2D
0117:  CALL   033
....................    for(i=1;i<=3;++i) 
0118:  MOVLW  01
0119:  MOVWF  23
011A:  MOVF   23,W
011B:  SUBLW  03
011C:  BTFSS  03.0
011D:  GOTO   128
....................    { 
....................        lcd_send_nibble(3); 
011E:  MOVLW  03
011F:  MOVWF  34
0120:  CALL   048
....................        lcd_send_nibble(0); 
0121:  CLRF   34
0122:  CALL   048
....................        delay_ms(5); 
0123:  MOVLW  05
0124:  MOVWF  2D
0125:  CALL   033
....................    } 
0126:  INCF   23,F
0127:  GOTO   11A
....................     
....................    lcd_send_nibble(2); 
0128:  MOVLW  02
0129:  MOVWF  34
012A:  CALL   048
....................    lcd_send_nibble(0); 
012B:  CLRF   34
012C:  CALL   048
....................    delay_ms(5); 
012D:  MOVLW  05
012E:  MOVWF  2D
012F:  CALL   033
....................    for(i=0;i<=3;++i) 
0130:  CLRF   23
0131:  MOVF   23,W
0132:  SUBLW  03
0133:  BTFSS  03.0
0134:  GOTO   13E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0135:  MOVF   23,W
0136:  CALL   004
0137:  MOVWF  24
0138:  CLRF   31
0139:  MOVF   24,W
013A:  MOVWF  32
013B:  CALL   0A4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013C:  INCF   23,F
013D:  GOTO   131
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
013E:  BCF    0A.3
013F:  BCF    0A.4
0140:  GOTO   28A (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
0141:  DECFSZ 2E,W
0142:  GOTO   144
0143:  GOTO   147
....................       address=LCD_LINE_TWO; 
0144:  MOVLW  40
0145:  MOVWF  2F
....................    else 
0146:  GOTO   148
....................       address=0; 
0147:  CLRF   2F
....................       
....................    address+=x-1; 
0148:  MOVLW  01
0149:  SUBWF  2D,W
014A:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
014B:  MOVF   2F,W
014C:  IORLW  80
014D:  MOVWF  30
014E:  CLRF   31
014F:  MOVF   30,W
0150:  MOVWF  32
0151:  CALL   0A4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0152:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0153:  MOVF   2C,W
0154:  XORLW  07
0155:  BTFSC  03.2
0156:  GOTO   161
0157:  XORLW  0B
0158:  BTFSC  03.2
0159:  GOTO   166
015A:  XORLW  06
015B:  BTFSC  03.2
015C:  GOTO   16E
015D:  XORLW  02
015E:  BTFSC  03.2
015F:  GOTO   174
0160:  GOTO   179
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0161:  MOVLW  01
0162:  MOVWF  2D
0163:  MOVWF  2E
0164:  CALL   141
0165:  GOTO   17F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0166:  CLRF   31
0167:  MOVLW  01
0168:  MOVWF  32
0169:  CALL   0A4
....................                      delay_ms(2); 
016A:  MOVLW  02
016B:  MOVWF  2D
016C:  CALL   033
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
016D:  GOTO   17F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
016E:  MOVLW  01
016F:  MOVWF  2D
0170:  MOVLW  02
0171:  MOVWF  2E
0172:  CALL   141
0173:  GOTO   17F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0174:  CLRF   31
0175:  MOVLW  10
0176:  MOVWF  32
0177:  CALL   0A4
0178:  GOTO   17F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0179:  MOVLW  01
017A:  MOVWF  31
017B:  MOVF   2C,W
017C:  MOVWF  32
017D:  CALL   0A4
017E:  GOTO   17F
....................      #endif 
....................    } 
.................... } 
017F:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "..\LaboTec\adc.c" 
.................... #include "adc.h" 
.................... #ifndef  __SERVOMOTOR__ 
.................... #define  __SERVOMOTOR__ 
....................  
....................  
.................... #define  ADC_CHANNEL    0 
.................... #define  ADC_CLOCK      ADC_CLOCK_INTERNAL 
.................... #define  ADC_PORT       AN0 
....................  
....................  
.................... #endif 
....................  
....................  
.................... void adc_init(){ 
....................    setup_adc(   ADC_CLOCK  ); 
*
0021:  BSF    03.5
0022:  BCF    1F.6
0023:  BCF    03.5
0024:  BSF    1F.6
0025:  BSF    1F.7
0026:  BSF    03.5
0027:  BSF    1F.7
0028:  BCF    03.5
0029:  BSF    1F.0
....................    setup_adc_ports(  ADC_PORT );    
002A:  BSF    03.5
002B:  BCF    1F.0
002C:  BSF    1F.1
002D:  BSF    1F.2
002E:  BSF    1F.3
.................... } 
002F:  BCF    03.5
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   289 (RETURN)
....................  
....................  
....................  
.................... void main(){ 
*
027C:  CLRF   04
027D:  BCF    03.7
027E:  MOVLW  1F
027F:  ANDWF  03,F
0280:  BSF    03.5
0281:  BSF    1F.0
0282:  BSF    1F.1
0283:  BSF    1F.2
0284:  BCF    1F.3
0285:  MOVLW  07
0286:  MOVWF  1C
....................    int16 adc1; 
....................     
....................    adc_init(); 
0287:  BCF    03.5
0288:  GOTO   021
....................    lcd_init(); 
0289:  GOTO   100
....................    lcd_putc('\f'); 
028A:  MOVLW  0C
028B:  MOVWF  2C
028C:  CALL   153
....................    printf(lcd_putc,"LaboTecPeru"); 
028D:  MOVLW  0C
028E:  BSF    03.6
028F:  MOVWF  0D
0290:  MOVLW  00
0291:  MOVWF  0F
0292:  BCF    03.6
0293:  CALL   180
....................    delay_ms(500); 
0294:  MOVLW  02
0295:  MOVWF  23
0296:  MOVLW  FA
0297:  MOVWF  2D
0298:  CALL   033
0299:  DECFSZ 23,F
029A:  GOTO   296
....................    lcd_putc('\f'); 
029B:  MOVLW  0C
029C:  MOVWF  2C
029D:  CALL   153
....................    for(;;){ 
....................       set_adc_channel( ADC_CHANNEL ); 
029E:  MOVLW  00
029F:  MOVWF  78
02A0:  MOVF   1F,W
02A1:  ANDLW  C7
02A2:  IORWF  78,W
02A3:  MOVWF  1F
....................       delay_us(20); 
02A4:  MOVLW  06
02A5:  MOVWF  77
02A6:  DECFSZ 77,F
02A7:  GOTO   2A6
02A8:  NOP
....................       adc1 = read_adc();   
02A9:  BSF    1F.2
02AA:  BTFSC  1F.2
02AB:  GOTO   2AA
02AC:  BSF    03.5
02AD:  MOVF   1E,W
02AE:  BCF    03.5
02AF:  MOVWF  21
02B0:  MOVF   1E,W
02B1:  MOVWF  22
....................       lcd_gotoxy(1,1); 
02B2:  MOVLW  01
02B3:  MOVWF  2D
02B4:  MOVWF  2E
02B5:  CALL   141
....................       printf(lcd_putc,"@LaboTecPeru"); 
02B6:  MOVLW  12
02B7:  BSF    03.6
02B8:  MOVWF  0D
02B9:  MOVLW  00
02BA:  MOVWF  0F
02BB:  BCF    03.6
02BC:  CALL   180
....................       lcd_gotoxy(1,2); 
02BD:  MOVLW  01
02BE:  MOVWF  2D
02BF:  MOVLW  02
02C0:  MOVWF  2E
02C1:  CALL   141
....................       printf(lcd_putc,"CanalAN0 = %Lu",adc1); 
02C2:  MOVLW  19
02C3:  BSF    03.6
02C4:  MOVWF  0D
02C5:  MOVLW  00
02C6:  MOVWF  0F
02C7:  BCF    03.0
02C8:  MOVLW  0B
02C9:  BCF    03.6
02CA:  MOVWF  23
02CB:  GOTO   1C6
02CC:  MOVLW  10
02CD:  MOVWF  04
02CE:  MOVF   22,W
02CF:  MOVWF  24
02D0:  MOVF   21,W
02D1:  MOVWF  23
02D2:  GOTO   217
....................       delay_ms(100); 
02D3:  MOVLW  64
02D4:  MOVWF  2D
02D5:  CALL   033
....................       lcd_putc('\f'); 
02D6:  MOVLW  0C
02D7:  MOVWF  2C
02D8:  CALL   153
....................    } 
02D9:  GOTO   29E
.................... } 
....................  
02DA:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
